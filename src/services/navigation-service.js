/**
 * Servi√ßo de Navega√ß√£o
 * Gerencia rotas e navega√ß√£o entre p√°ginas da aplica√ß√£o
 */
class NavigationService {
    constructor() {
        this.currentPage = 'home';
        this.isRenderingContracts = false; // Controle de renderiza√ß√£o
        this.pages = {
            home: {
                id: 'home',
                title: 'Deal-Fi - Home',
                component: 'home-view'
            },
            create: {
                id: 'create',
                title: 'Deal-Fi - Criar Contrato',
                component: 'create-contract-view'
            },
            manage: {
                id: 'manage',
                title: 'Deal-Fi - Gerenciar Contratos',
                component: 'manage-contracts-view'
            }
        };
        
        this.init();
    }

    init() {
        // Configurar listener para mudan√ßas de hash
        window.addEventListener('hashchange', this.handleHashChange.bind(this));
        
        // N√ÉO inicializar automaticamente - deixar para o main.js controlar
        console.log('üîß NavigationService inicializado (sem auto-render)');
        
        // Configurar eventos do modal
        this.setupModalEvents();
    }

    /**
     * Inicializa a navega√ß√£o ap√≥s o DOM estar pronto
     */
    initializeNavigation() {
        // Verificar se h√° hash na URL
        if (!window.location.hash) {
            // Sem hash = p√°gina inicial, n√£o fazer nada
            this.currentPage = 'home';
            console.log('üè† P√°gina inicial - componentes existentes mantidos');
        } else {
            // Com hash = navegar para a p√°gina espec√≠fica
            this.handleHashChange();
        }
    }

    /**
     * Navega para uma p√°gina espec√≠fica
     */
    navigateTo(pageId) {
        const page = this.pages[pageId];
        if (!page) {
            console.error(`P√°gina n√£o encontrada: ${pageId}`);
            return;
        }

        // Atualizar estado atual
        this.currentPage = pageId;
        
        // Atualizar t√≠tulo da p√°gina
        document.title = page.title;
        
        // Renderizar p√°gina
        this.renderPage(pageId);
        
        // Atualizar hash da URL
        window.location.hash = `#${pageId}`;
        
        console.log(`üöÄ Navegando para: ${page.title}`);
    }

    /**
     * Manipula mudan√ßas no hash da URL
     */
    handleHashChange() {
        const hash = window.location.hash.replace('#', '');
        const pageId = hash || 'home';
        
        // Evitar renderiza√ß√£o dupla se j√° estiver na p√°gina correta
        if (this.currentPage === pageId) {
            return;
        }
        
        if (this.pages[pageId]) {
            this.currentPage = pageId;
            this.renderPage(pageId);
        } else {
            console.warn(`P√°gina n√£o encontrada: ${pageId}, redirecionando para home`);
            this.navigateTo('home');
        }
    }

    /**
     * Renderiza a p√°gina solicitada
     */
    renderPage(pageId) {
        const page = this.pages[pageId];
        const mainContainer = document.querySelector('.main-container');
        
        if (!mainContainer) {
            console.error('Container principal n√£o encontrado');
            return;
        }
        // Fade out suave do conte√∫do atual
        mainContainer.classList.add('fade-out');

        // Ap√≥s a transi√ß√£o, troca o conte√∫do e faz fade in
        setTimeout(() => {
            // Limpar container
            mainContainer.innerHTML = '';
        
            // Renderizar p√°gina espec√≠fica
            switch (pageId) {
                case 'home':
                    this.renderHomePage(mainContainer);
                    break;
                case 'create':
                    this.renderCreatePage(mainContainer);
                    break;
                case 'manage':
                    this.renderManagePage(mainContainer);
                    break;
                default:
                    this.renderHomePage(mainContainer);
            }

            // Pequeno timeout para garantir reflow antes de remover fade-out
            requestAnimationFrame(() => {
                mainContainer.classList.remove('fade-out');
            });
        }, 180); // combina com o transition do CSS
    }

    /**
     * Renderiza a p√°gina inicial
     */
    renderHomePage(container) {
        // Parar polling ao sair da p√°gina de gerenciamento
        if (window.contractPollingService) {
            window.contractPollingService.stopPolling();
        }
        // Sempre renderizar com card de notifica√ß√£o inicialmente
        container.innerHTML = `
            <div class="home-content">
                <div class="welcome-section">
                    <h2>üè† Bem-vindo</h2>
                    <p>Plataforma de escrow n√£o-custodial para contratos inteligentes</p>
                </div>
                
                <div class="wallet-notice" id="wallet-notice">
                    <div class="notice-card">
                        <div class="notice-icon">üîó</div>
                        <h3>Conecte sua Carteira</h3>
                        <p>Para usar os contratos escrow, clique no √≠cone da MetaMask no canto superior direito para conectar sua carteira.</p>
                    </div>
                    
                    <div class="action-card" onclick="window.navigationService.showHelpModal()">
                        <div class="action-icon help-icon"></div>
                        <h3>Como Funciona</h3>
                        <p>Entenda o funcionamento dos contratos escrow</p>
                    </div>
                </div>
                
                <div class="quick-actions" id="quick-actions" style="display: none;">
                    <div class="action-card" onclick="window.navigationService.navigateTo('create')">
                        <div class="action-icon create-icon"></div>
                        <h3>Criar Novo Contrato</h3>
                    </div>
                    
                    <div class="action-card" onclick="window.navigationService.navigateTo('manage')">
                        <div class="action-icon manage-icon"></div>
                        <h3>Gerenciar Contratos</h3>
                        <p>Visualize e gerencie seus contratos ativos</p>
                    </div>
                    
                    <div class="action-card" onclick="window.navigationService.showHelpModal()">
                        <div class="action-icon help-icon"></div>
                        <h3>Como Funciona</h3>
                        <p>Entenda o funcionamento dos contratos escrow</p>
                </div>
                </div>
            </div>
            
        <!-- Container para contratos reais (OCULTO na tela inicial) -->
        <div class="right-column" id="right-content" style="display: none;">
            <!-- Contratos reais ser√£o renderizados aqui APENAS quando necess√°rio -->
            </div>
        `;
        
        // Verificar se carteira j√° est√° conectada e atualizar interface
        this.updateHomePageForWalletStatus();
        
        // Adicionar listener para atualizar quando carteira conectar
        this.addWalletConnectionListener();
        
        console.log('üè† P√°gina inicial renderizada com bot√µes de navega√ß√£o e right-content');
    }

    /**
     * Atualiza a p√°gina inicial baseado no status da carteira
     */
    updateHomePageForWalletStatus() {
        const isWalletConnected = window.walletService && window.walletService.isConnected;
        const walletNotice = document.getElementById('wallet-notice');
        const quickActions = document.getElementById('quick-actions');
        
        if (walletNotice && quickActions) {
            if (isWalletConnected) {
                // Transi√ß√£o suave: esconder notifica√ß√£o primeiro
                walletNotice.style.transition = 'opacity 0.2s ease-out';
                walletNotice.style.opacity = '0';
                
                setTimeout(() => {
                    walletNotice.style.display = 'none';
                    // Mostrar bot√µes ap√≥s notifica√ß√£o desaparecer
                    quickActions.style.display = 'flex';
                    quickActions.style.transition = 'opacity 0.2s ease-in';
                    quickActions.style.opacity = '0';
                    
                    // Pequeno delay para evitar tremilico
                    requestAnimationFrame(() => {
                        quickActions.style.opacity = '1';
                    });
                }, 200);
                
                console.log('‚úÖ Interface atualizada: carteira conectada - mostrando bot√µes');
            } else {
                // Transi√ß√£o suave: esconder bot√µes primeiro
                quickActions.style.transition = 'opacity 0.2s ease-out';
                quickActions.style.opacity = '0';
                
                setTimeout(() => {
                    quickActions.style.display = 'none';
                    // Mostrar notifica√ß√£o ap√≥s bot√µes desaparecerem
                    walletNotice.style.display = 'flex';
                    walletNotice.style.transition = 'opacity 0.2s ease-in';
                    walletNotice.style.opacity = '0';
                    
                    // Pequeno delay para evitar tremilico
                    requestAnimationFrame(() => {
                        walletNotice.style.opacity = '1';
                    });
                }, 200);
                
                console.log('‚ö†Ô∏è Interface atualizada: carteira desconectada - mostrando notifica√ß√£o');
            }
        }
    }

    /**
     * Adiciona listener para eventos de conex√£o da carteira
     */
    addWalletConnectionListener() {
        // Remover listener anterior se existir
        if (this.walletConnectionHandler) {
            document.removeEventListener('walletConnected', this.walletConnectionHandler);
        }
        
        // Criar novo handler
        this.walletConnectionHandler = () => {
            console.log('üîÑ Evento de conex√£o recebido - atualizando p√°gina inicial');
            this.updateHomePageForWalletStatus();
        };
        
        // Adicionar listener
        document.addEventListener('walletConnected', this.walletConnectionHandler);
        console.log('üéß Listener de conex√£o da carteira adicionado');
    }

    /**
     * Renderiza a p√°gina de cria√ß√£o de contratos
     */
    renderCreatePage(container) {
        // Parar polling ao sair da p√°gina de gerenciamento
        if (window.contractPollingService) {
            window.contractPollingService.stopPolling();
        }
        // Usar o formul√°rio avan√ßado do create-contract-form.js
        container.innerHTML = window.createContractForm.render();
        
        // Inicializar eventos do formul√°rio avan√ßado
        window.createContractForm.bindEvents();
    }

    /**
     * Renderiza a p√°gina de gerenciamento de contratos
     * ATUALIZADO: Usa sistema de estados
     */
    async renderManagePage(container) {
        container.innerHTML = `
            <div class="manage-contracts-page" style="padding: 20px; max-width: 1200px; margin: 0 auto;">
                <!-- Barra de A√ß√µes no Topo -->
                <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 30px;">
                    <button class="back-btn-top" onclick="window.navigationService.restoreHomePage()">
                        ‚Üê Voltar
                    </button>
                    
                    <button class="back-btn-top" 
                        onclick="window.realContractService.showAddContractModal('${window.walletService?.account || ''}')" 
                        onmouseover="this.style.transform='translateY(-2px)'; this.style.boxShadow='0 8px 25px rgba(102,126,234,0.4)';"
                        onmouseout="this.style.transform='none'; this.style.boxShadow='0 4px 15px rgba(102,126,234,0.3)';">
                        üîç Buscar Contrato
                    </button>
                </div>
                
                <!-- Container para UI baseada em estado -->
                <div id="state-based-container">
                    <div style="text-align: center; padding: 60px 20px;">
                        <p style="font-size: 18px; color: #666;">üîÑ Carregando estado do contrato...</p>
                    </div>
                </div>
            </div>
        `;

        // Carregar e renderizar usando sistema de estados
        await this.loadStateBasedUI();
        console.log('üìã P√°gina de gerenciamento carregada com sistema de estados');
    }

    /**
     * Carrega UI baseada em estado (NOVO SISTEMA)
     */
    async loadStateBasedUI() {
        try {
            console.log('üîÑ Carregando UI baseada em estado...');
            
            const container = document.getElementById('state-based-container');
            if (!container) {
                console.error('‚ùå Container state-based-container n√£o encontrado');
                return;
            }
            
            // Verificar se h√° contrato conectado
            if (!window.realContractService || !window.realContractService.contract) {
                console.log('‚ö†Ô∏è Nenhum contrato encontrado');
                container.innerHTML = `
                    <div class="no-contracts">
                        <div class="no-contracts-icon">üìã</div>
                        <h3>Nenhum contrato encontrado</h3>
                        <p>Conecte sua carteira ou adicione um contrato existente.</p>
                        <div class="no-contracts-actions">
                            <button class="btn-primary" onclick="window.realContractService.showAddContractModal('${window.walletService?.account || ''}')">
                                üîó Conectar Contrato Existente
                            </button>
                            <button class="btn-secondary" onclick="window.navigationService.navigateTo('create')">
                                ‚ûï Criar Novo Contrato
                            </button>
                        </div>
                    </div>
                `;
                return;
            }
            
            // Obter dados do contrato
            console.log('üìç [loadStateBasedUI] Contrato ativo:', window.realContractService.contractAddress);
            
            const contractData = await window.realContractService.getContractDetails();
            const userAddress = window.walletService?.account || '';
            
            console.log('üìä [loadStateBasedUI] Dados do contrato:', contractData);
            console.log('üë§ [loadStateBasedUI] Usu√°rio:', userAddress);
            console.log('üí∞ [loadStateBasedUI] Valor do contrato:', contractData.amount, 'USDC');
            
            // Determinar estado usando ContractStateService
            const state = window.contractStateService.determineState(
                contractData,
                userAddress
            );
            
            console.log('‚úÖ Estado determinado:', state);
            
            // Renderizar UI usando StateBasedUIComponent
            window.stateBasedUIComponent.render(state, contractData);
            
            // Iniciar polling para atualiza√ß√µes autom√°ticas
            if (window.contractPollingService) {
                window.contractPollingService.startPolling();
            }
            
        } catch (error) {
            console.error('‚ùå Erro ao carregar UI baseada em estado:', error);
            
            const container = document.getElementById('state-based-container');
            if (container) {
                container.innerHTML = `
                    <div class="error-message" style="
                        text-align: center;
                        padding: 60px 20px;
                        background: rgba(239,68,68,0.1);
                        border: 2px solid rgba(239,68,68,0.3);
                        border-radius: 20px;
                        margin: 20px;
                    ">
                        <div style="font-size: 48px; margin-bottom: 20px;">‚ùå</div>
                        <h3 style="color: #ef4444; margin-bottom: 15px;">Erro ao Carregar</h3>
                        <p style="color: #666; margin-bottom: 25px;">${error.message}</p>
                        <button class="btn-primary" onclick="window.navigationService.loadStateBasedUI()">
                            üîÑ Tentar Novamente
                        </button>
                    </div>
                `;
            }
        }
    }
    
    /**
     * Recarrega a p√°gina atual (usado ap√≥s a√ß√µes)
     */
    async refreshCurrentPage() {
        console.log('üîÑ Recarregando p√°gina atual:', this.currentPage);
        
        if (this.currentPage === 'manage') {
            // Verificar se container existe antes de atualizar
            const container = document.getElementById('state-based-container');
            if (container) {
                await this.loadStateBasedUI();
            } else {
                console.warn('‚ö†Ô∏è Container ainda n√£o existe, ignorando refresh');
            }
        }
    }
    
    /**
     * M√âTODO ANTIGO - Mantido por compatibilidade
     * @deprecated Use loadStateBasedUI() em vez disso
     */
    async loadRealContractsForManage() {
        try {
            // CONTROLE DE RENDERIZA√á√ÉO PARA EVITAR DUPLICA√á√ÉO
            if (this.isRenderingContracts) {
                console.log('‚ö†Ô∏è Renderiza√ß√£o j√° em andamento, ignorando chamada duplicada');
                return;
            }
            
            this.isRenderingContracts = true;
            console.log('üîÑ Carregando contratos reais para gerenciamento...');
            
            const contractsList = document.getElementById('contractsList');
            if (!contractsList) {
                console.log('‚ùå Elemento contractsList n√£o encontrado');
                this.isRenderingContracts = false;
                return;
            }

            // Obter endere√ßo do usu√°rio (definir fora dos blocos para uso em toda fun√ß√£o)
            const userAddress = window.walletService?.account || '';

            // Verificar se h√° contrato real conectado
            console.log('üîç Verificando contrato no servi√ßo...');
            console.log('üîç realContractService existe:', !!window.realContractService);
            console.log('üîç contract existe:', !!(window.realContractService && window.realContractService.contract));
            console.log('üîç contractAddress:', window.realContractService?.contractAddress);
            
            if (window.realContractService && window.realContractService.contract) {
                console.log('‚úÖ Contrato encontrado no servi√ßo:', window.realContractService.contractAddress);
                const contractData = await window.realContractService.getContractDetails();
                console.log('üìä Dados do contrato para gerenciamento:', contractData);
                
                // Criar card do contrato real
                const isPayer = contractData.payer.toLowerCase() === userAddress.toLowerCase();
                const isPayee = contractData.payee.toLowerCase() === userAddress.toLowerCase();
                
                let actionsHTML = '';
                let statusText = '';
                let statusColor = '';
                
                // Debug: Verificar estado do contrato
                console.log('üîç Estado do contrato para renderiza√ß√£o:', {
                    platformFeePaid: contractData.platformFeePaid,
                    confirmedPayer: contractData.confirmedPayer,
                    confirmedPayee: contractData.confirmedPayee,
                    deposited: contractData.deposited,
                    isPayer: isPayer,
                    isPayee: isPayee
                });
                
                // Verificar se taxa de plataforma foi paga
                if (!contractData.platformFeePaid) {
                    statusText = '‚ö†Ô∏è Taxa de Plataforma Pendente';
                    statusColor = '#ef4444';
                    
                    actionsHTML = `
                        <button class="btn-primary" onclick="window.navigationService.payPlatformFee()">
                            üí≥ Pagar Taxa (1 USDC)
                        </button>
                    `;
                }
                // Verificar se confirma√ß√µes est√£o pendentes
                else if (!contractData.confirmedPayer && isPayer) {
                    statusText = '‚è≥ Aguardando Confirma√ß√£o do Payer';
                    statusColor = '#f59e0b';
                    
                    actionsHTML = `
                        <button class="btn-primary" onclick="window.navigationService.confirmPayer()">
                            ‚úÖ Confirmar Payer
                        </button>
                    `;
                }
                else if (!contractData.confirmedPayee && isPayee) {
                    statusText = '‚è≥ Aguardando Confirma√ß√£o do Payee';
                    statusColor = '#f59e0b';
                    
                    actionsHTML = `
                        <button class="btn-primary" onclick="window.navigationService.confirmPayee()">
                            ‚úÖ Confirmar Payee
                        </button>
                    `;
                }
                else if (!contractData.confirmedPayer || !contractData.confirmedPayee) {
                    // Mostrar status de confirma√ß√£o pendente para qualquer usu√°rio
                    if (!contractData.confirmedPayer && !contractData.confirmedPayee) {
                        statusText = '‚è≥ Aguardando Confirma√ß√µes (Payer e Payee)';
                    } else if (!contractData.confirmedPayer) {
                        statusText = '‚è≥ Aguardando Confirma√ß√£o do Payer';
                    } else if (!contractData.confirmedPayee) {
                        statusText = '‚è≥ Aguardando Confirma√ß√£o do Payee';
                    }
                    statusColor = '#f59e0b';
                    
                    actionsHTML = `
                        <button class="btn-secondary" onclick="window.navigationService.checkStatus()">
                            üìã Verificar Status
                        </button>
                    `;
                }
                // Verificar se dep√≥sito est√° pendente
                else if (!contractData.deposited) {
                    statusText = '‚è≥ Aguardando Dep√≥sito';
                    statusColor = '#f59e0b';
                    
                    if (isPayer) {
                        actionsHTML = `
                            <button class="btn-primary" onclick="window.navigationService.depositContract()">
                                üí≥ Depositar USDC
                        </button>
                        `;
                    } else if (isPayee) {
                        actionsHTML = `
                            <button class="btn-secondary" onclick="window.navigationService.checkStatus()">
                                üìã Verificar Status
                            </button>
                        `;
                    }
                } else {
                    statusText = 'Contrato Ativo';
                    statusColor = '#10b981';
                    
                    if (isPayer) {
                        // Bot√µes espec√≠ficos para PAGADOR
                        actionsHTML = '';
                        
                        // Verificar se algum marco foi liberado
                        const firstMilestoneReleased = contractData.milestoneInfo && 
                                                       contractData.milestoneInfo.length > 0 && 
                                                       contractData.milestoneInfo[0].released;
                        
                        // Verificar se prazo venceu
                        const deadlinePassed = contractData.deadline && new Date() > new Date(contractData.deadline);
                        
                        // Verificar quais marcos ainda n√£o foram executados
                        const pendingMilestones = [];
                        if (contractData.milestoneInfo && contractData.milestoneInfo.length > 0) {
                            for (let i = 0; i < contractData.milestoneInfo.length; i++) {
                                if (!contractData.milestoneInfo[i].released) {
                                    pendingMilestones.push(i);
                                }
                            }
                        }
                        
                        // Mostrar bot√µes para marcos pendentes
                        if (pendingMilestones.length > 0) {
                            pendingMilestones.forEach(milestoneIndex => {
                                actionsHTML += `
                                    <button class="btn-primary" onclick="window.navigationService.releaseMilestone(${milestoneIndex})">
                                        ‚úÖ Liberar Marco ${milestoneIndex + 1}
                                    </button>
                                `;
                            });
                        } else {
                            actionsHTML += `
                                <div class="milestone-status">
                                    <span class="status-text">‚úÖ Todos os marcos foram liberados</span>
                                </div>
                            `;
                        }
                        
                        // Refund: Apenas ANTES do primeiro marco ser liberado
                        if (!firstMilestoneReleased) {
                            actionsHTML += `
                                <button class="btn-danger" onclick="window.navigationService.refundContract()">
                                    üîÑ Refund (Recuperar 100%)
                                </button>
                            `;
                        }
                        
                        // Propor Settlement: Sempre dispon√≠vel
                        actionsHTML += `
                            <button class="btn-info" onclick="window.navigationService.proposeSettlement()">
                                ü§ù Propor Acordo (Settlement)
                            </button>
                        `;
                        
                        // Aprovar Cancelamento: Sempre dispon√≠vel
                        actionsHTML += `
                            <button class="btn-warning" onclick="window.navigationService.approveCancel()">
                                ‚ùå Aprovar Cancelamento
                            </button>
                        `;
                        
                        // Reclamar Ap√≥s Prazo: Apenas AP√ìS deadline
                        if (deadlinePassed) {
                            actionsHTML += `
                                <button class="btn-danger" onclick="window.navigationService.claimAfterDeadline()">
                                    ‚è∞ Reclamar Ap√≥s Prazo
                                </button>
                            `;
                        }
                    } else if (isPayee) {
                        // Bot√µes espec√≠ficos para RECEBEDOR
                        actionsHTML = `
                            <button class="btn-warning" onclick="window.navigationService.approveCancel()">
                                ‚ùå Aprovar Cancelamento
                            </button>
                            <button class="btn-info" onclick="window.navigationService.approveSettlement()">
                                ‚úÖ Aprovar Acordo (Settlement)
                            </button>
                        `;
                    }
                }
                
                // Adicionar bot√£o para ver detalhes
                actionsHTML += `
                    <button class="btn-secondary" onclick="window.navigationService.viewContractDetails()">
                        Ver Detalhes
                    </button>
                `;
                
                contractsList.innerHTML = `
                    <div class="contract-card-real">
                        <div class="contract-header">
                            <h3>üîó Contrato Escrow USDC</h3>
                            <span class="status-badge" style="background: ${statusColor}20; color: ${statusColor};">
                                ${statusText}
                            </span>
                        </div>

                        <div class="contract-info">
                            <div class="info-row">
                                <span class="label">Valor Total:</span>
                                <span class="value">${contractData.amount} USDC</span>
                            </div>
                            <div class="info-row">
                                <span class="label">Saldo Restante:</span>
                                <span class="value">${contractData.remainingAmount} USDC</span>
                            </div>
                            <div class="info-row">
                                <span class="label">Pagador:</span>
                                <span class="value">${contractData.payer.substring(0, 6)}...${contractData.payer.substring(38)}</span>
                            </div>
                            <div class="info-row">
                                <span class="label">Recebedor:</span>
                                <span class="value">${contractData.payee.substring(0, 6)}...${contractData.payee.substring(38)}</span>
                            </div>
                            <div class="info-row">
                                <span class="label">Prazo:</span>
                                <span class="value">${contractData.deadline.toLocaleDateString('pt-BR')}</span>
                            </div>
                            <div class="info-row">
                                <span class="label">Seu Papel:</span>
                                <span class="value">${isPayer ? 'üë§ PAGADOR' : isPayee ? 'üë§ RECEBEDOR' : 'üë§ OBSERVADOR'}</span>
                            </div>
                        </div>

                        <div class="contract-actions">
                            ${actionsHTML}
                        </div>
                    </div>
                `;
                
                console.log('‚úÖ Contrato real renderizado na p√°gina de gerenciamento');
                
                } else {
                    // Nenhum contrato encontrado
                    console.log('‚ö†Ô∏è Nenhum contrato encontrado - mostrando op√ß√µes de conex√£o');
                    contractsList.innerHTML = `
                        <div class="no-contracts">
                            <div class="no-contracts-icon">üìã</div>
                            <h3>Nenhum contrato encontrado</h3>
                            <p>Voc√™ pode conectar um contrato existente ou criar um novo</p>
                            <div class="no-contracts-actions">
                                <button class="btn-primary" onclick="window.realContractService.showAddContractModal('${userAddress}')">
                                    üîó Conectar Contrato Existente
                        </button>
                                <button class="btn-secondary" onclick="window.navigationService.navigateTo('create')">
                                    ‚ûï Criar Novo Contrato
                                </button>
                </div>
            </div>
        `;
                }
            
        } catch (error) {
            console.error('‚ùå Erro ao carregar contratos para gerenciamento:', error);
            
            const contractsList = document.getElementById('contractsList');
            if (contractsList) {
                contractsList.innerHTML = `
                    <div class="error-message">
                        <div class="error-icon">‚ùå</div>
                        <h3>Erro ao carregar contratos</h3>
                        <p>${error.message}</p>
                        <button class="btn-primary" onclick="window.navigationService.loadStateBasedUI()">
                            üîÑ Tentar Novamente
                        </button>
                    </div>
                `;
            }
        } finally {
            // LIBERAR CONTROLE DE RENDERIZA√á√ÉO
            this.isRenderingContracts = false;
        }
    }

    /**
     * A√ß√µes do contrato
     */
    
    // Fun√ß√£o para pagar taxa de plataforma
    async payPlatformFee() {
        try {
            console.log('üí≥ Pagando taxa de plataforma...');
            
            const success = await window.realContractService.payPlatformFee();
            if (success) {
                alert('‚úÖ Taxa de plataforma paga com sucesso!');
                
                // Aguardar propaga√ß√£o da transa√ß√£o
                console.log('‚è≥ Aguardando propaga√ß√£o da transa√ß√£o...');
                await new Promise(resolve => setTimeout(resolve, 3000));
                
                // Recarregar interface usando novo sistema
                await this.refreshCurrentPage();
            } else {
                alert('‚ùå Erro ao pagar taxa de plataforma');
            }
        } catch (error) {
            console.error('‚ùå Erro ao pagar taxa:', error);
            alert('‚ùå Erro ao pagar taxa: ' + error.message);
        }
    }

    // Fun√ß√£o para confirmar identidade do payer
    async confirmPayer() {
        try {
            console.log('‚úÖ Confirmando identidade do payer...');
            
            await window.realContractService.confirmPayer();
            alert('‚úÖ Identidade do payer confirmada!');
            
            // Aguardar um pouco para a transa√ß√£o ser propagada
            console.log('‚è≥ Aguardando propaga√ß√£o da transa√ß√£o...');
            await new Promise(resolve => setTimeout(resolve, 3000));
            
            // Recarregar contratos para atualizar interface
            await this.loadRealContracts();
        } catch (error) {
            console.error('‚ùå Erro ao confirmar payer:', error);
            alert('‚ùå Erro ao confirmar payer: ' + error.message);
        }
    }

    // Fun√ß√£o para confirmar identidade do payee
    async confirmPayee() {
        try {
            console.log('‚úÖ Confirmando identidade do payee...');
            
            await window.realContractService.confirmPayee();
            alert('‚úÖ Identidade do payee confirmada!');
            
            // Aguardar propaga√ß√£o da transa√ß√£o
            console.log('‚è≥ Aguardando propaga√ß√£o da transa√ß√£o...');
            await new Promise(resolve => setTimeout(resolve, 3000));
            
            // Recarregar contratos para atualizar interface
            await this.loadRealContracts();
        } catch (error) {
            console.error('‚ùå Erro ao confirmar payee:', error);
            alert('‚ùå Erro ao confirmar payee: ' + error.message);
        }
    }

    // Fun√ß√£o para liberar marco
    async releaseMilestone(milestoneIndex) {
        try {
            console.log(`‚úÖ Liberando marco ${milestoneIndex}...`);
            
            await window.realContractService.releaseMilestone(milestoneIndex);
            alert(`‚úÖ Marco ${milestoneIndex + 1} liberado com sucesso!`);
            
            // Aguardar propaga√ß√£o
            await new Promise(resolve => setTimeout(resolve, 3000));
            await this.loadRealContracts();
        } catch (error) {
            console.error('‚ùå Erro ao liberar marco:', error);
            alert('‚ùå Erro ao liberar marco: ' + error.message);
        }
    }

    // Fun√ß√£o para propor settlement
    async proposeSettlement() {
        try {
            console.log('ü§ù Propondo settlement...');
            
            const amount = prompt('Digite o valor em USDC que deseja pagar ao payee (acordo parcial):');
            if (!amount || isNaN(amount) || parseFloat(amount) <= 0) {
                alert('‚ùå Valor inv√°lido');
                return;
            }
            
            await window.realContractService.proposeSettlement(parseFloat(amount));
            alert('‚úÖ Settlement proposto com sucesso!');
            
            // Aguardar propaga√ß√£o
            await new Promise(resolve => setTimeout(resolve, 3000));
            await this.loadRealContracts();
        } catch (error) {
            console.error('‚ùå Erro ao propor settlement:', error);
            alert('‚ùå Erro ao propor settlement: ' + error.message);
        }
    }

    // Fun√ß√£o para aprovar settlement (payee)
    async approveSettlement() {
        try {
            console.log('‚úÖ Aprovando settlement...');
            
            await window.realContractService.approveSettlement();
            alert('‚úÖ Settlement aprovado com sucesso!');
            
            // Aguardar propaga√ß√£o
            await new Promise(resolve => setTimeout(resolve, 3000));
            await this.loadRealContracts();
        } catch (error) {
            console.error('‚ùå Erro ao aprovar settlement:', error);
            alert('‚ùå Erro ao aprovar settlement: ' + error.message);
        }
    }

    // Fun√ß√£o para fazer refund
    async refundContract() {
        try {
            console.log('üîÑ Fazendo refund...');
            
            const confirm = window.confirm('Tem certeza que deseja fazer refund? Voc√™ recuperar√° 100% do valor depositado.');
            if (!confirm) return;
            
            await window.realContractService.refund();
            alert('‚úÖ Refund realizado com sucesso!');
            
            // Aguardar propaga√ß√£o
            await new Promise(resolve => setTimeout(resolve, 3000));
            await this.loadRealContracts();
        } catch (error) {
            console.error('‚ùå Erro ao fazer refund:', error);
            alert('‚ùå Erro ao fazer refund: ' + error.message);
        }
    }

    // Fun√ß√£o para aprovar cancelamento
    async approveCancel() {
        try {
            console.log('‚ùå Aprovando cancelamento...');
            
            await window.realContractService.approveCancel();
            alert('‚úÖ Cancelamento aprovado! Se a outra parte tamb√©m aprovar dentro de 1h, o contrato ser√° cancelado.');
            
            // Aguardar propaga√ß√£o
            await new Promise(resolve => setTimeout(resolve, 3000));
            await this.loadRealContracts();
        } catch (error) {
            console.error('‚ùå Erro ao aprovar cancelamento:', error);
            alert('‚ùå Erro ao aprovar cancelamento: ' + error.message);
        }
    }

    // Fun√ß√£o para reclamar ap√≥s prazo
    async claimAfterDeadline() {
        try {
            console.log('‚è∞ Reclamando ap√≥s prazo...');
            
            const confirm = window.confirm('Tem certeza que deseja reclamar o saldo restante ap√≥s o prazo?');
            if (!confirm) return;
            
            await window.realContractService.claimAfterDeadline();
            alert('‚úÖ Saldo reclamado com sucesso!');
            
            // Aguardar propaga√ß√£o
            await new Promise(resolve => setTimeout(resolve, 3000));
            await this.loadRealContracts();
        } catch (error) {
            console.error('‚ùå Erro ao reclamar ap√≥s prazo:', error);
            alert('‚ùå Erro ao reclamar ap√≥s prazo: ' + error.message);
        }
    }

    async depositContract() {
        try {
            console.log('üí∞ Iniciando dep√≥sito no contrato...');
            
            // Verificar se h√° contrato conectado
            if (!window.realContractService || !window.realContractService.contract) {
                alert('‚ùå Nenhum contrato conectado');
                return;
            }
            
            // Verificar se h√° carteira conectada
            if (!window.walletService || !window.walletService.isConnected) {
                alert('‚ùå Carteira n√£o conectada');
                return;
            }
            
            // Obter detalhes do contrato
            const contractData = await window.realContractService.getContractDetails();
            console.log('üìä Dados do contrato para dep√≥sito:', contractData);
            
            // Verificar se o usu√°rio √© o pagador
            const userAddress = window.walletService.account;
            const isPayer = contractData.payer.toLowerCase() === userAddress.toLowerCase();
            
            if (!isPayer) {
                alert('‚ùå Apenas o pagador pode fazer dep√≥sito');
                return;
            }
            
            // Verificar se j√° foi depositado
            if (contractData.deposited) {
                alert('‚úÖ Contrato j√° foi depositado');
                return;
            }
            
                // Perguntar o valor do dep√≥sito
                const depositAmount = prompt(
                    `üí∞ Definir Valor do Dep√≥sito\n\n` +
                    `Recebedor: ${contractData.payee}\n` +
                    `Prazo: ${contractData.deadline}\n\n` +
                    `Digite o valor em USDC (ex: 8):`
                );
                
                if (!depositAmount || isNaN(depositAmount) || parseFloat(depositAmount) <= 0) {
                    alert('‚ùå Valor inv√°lido');
                    return;
                }
                
                const confirmDeposit = confirm(
                    `üí∞ Confirmar Dep√≥sito\n\n` +
                    `Valor: ${depositAmount} USDC\n` +
                    `Recebedor: ${contractData.payee}\n` +
                    `Prazo: ${contractData.deadline}\n\n` +
                    `Deseja continuar?`
                );
            
            if (!confirmDeposit) {
                console.log('‚ùå Dep√≥sito cancelado pelo usu√°rio');
                return;
            }
            
                // Executar dep√≥sito real
                console.log('üöÄ Executando dep√≥sito real...');
                
                const success = await this.executeRealDeposit(contractData, parseFloat(depositAmount));
            
            if (success) {
                alert('‚úÖ Dep√≥sito realizado com sucesso!');
                // Recarregar interface usando novo sistema
                await this.refreshCurrentPage();
            } else {
                alert('‚ùå Erro ao realizar dep√≥sito');
            }
            
        } catch (error) {
            console.error('‚ùå Erro ao depositar no contrato:', error);
            alert('‚ùå Erro ao depositar: ' + error.message);
        }
    }

        /**
         * Executa o dep√≥sito real no contrato
         */
        async executeRealDeposit(contractData, depositAmount) {
        try {
            console.log('üí≥ Executando dep√≥sito real no contrato...');
            
            const contract = window.realContractService.contract;
            const signer = window.walletService.signer;
            
            // Conectar contrato com signer
            const contractWithSigner = contract.connect(signer);
            
                // Obter valor total em wei (USDC tem 6 decimais)
                const totalValueWei = ethers.utils.parseUnits(depositAmount.toString(), 6);
                
                console.log('üí∞ Valor a depositar:', depositAmount, 'USDC');
            console.log('üí∞ Valor em wei:', totalValueWei.toString());
            
            // Verificar se tem saldo suficiente de USDC
            const usdcAddress = '0x3c499c542cEF5E3811e1192ce70d8cC03d5c3359'; // USDC.e na Polygon
            const usdcContract = new ethers.Contract(usdcAddress, [
                'function balanceOf(address owner) view returns (uint256)',
                'function approve(address spender, uint256 amount) returns (bool)',
                'function allowance(address owner, address spender) view returns (uint256)'
            ], signer);
            
            const userBalance = await usdcContract.balanceOf(window.walletService.account);
            console.log('üí∞ Saldo USDC do usu√°rio:', ethers.utils.formatUnits(userBalance, 6), 'USDC');
            
            if (userBalance.lt(totalValueWei)) {
                alert('‚ùå Saldo insuficiente de USDC');
                return false;
            }
            
            // Verificar allowance
            const allowance = await usdcContract.allowance(window.walletService.account, contract.address);
            console.log('üí∞ Allowance atual:', ethers.utils.formatUnits(allowance, 6), 'USDC');
            
            if (allowance.lt(totalValueWei)) {
                console.log('üîì Aprovando USDC para o contrato...');
                
                // Aprovar USDC para o contrato
                const approveTx = await usdcContract.approve(contract.address, totalValueWei);
                console.log('‚è≥ Aguardando confirma√ß√£o da aprova√ß√£o...');
                await approveTx.wait();
                
                console.log('‚úÖ USDC aprovado com sucesso!');
            }
            
            // Executar dep√≥sito
            console.log('üí≥ Executando dep√≥sito no contrato...');
            const depositTx = await contractWithSigner.deposit(totalValueWei);
            
            console.log('‚è≥ Aguardando confirma√ß√£o do dep√≥sito...');
            const receipt = await depositTx.wait();
            
            console.log('‚úÖ Dep√≥sito confirmado!');
            console.log('üìã Transaction hash:', receipt.transactionHash);
            
            return true;
            
        } catch (error) {
            console.error('‚ùå Erro ao executar dep√≥sito:', error);
            
            if (error.code === 'ACTION_REJECTED') {
                alert('‚ùå Transa√ß√£o rejeitada pelo usu√°rio');
            } else if (error.code === 'INSUFFICIENT_FUNDS') {
                alert('‚ùå Saldo insuficiente');
            } else {
                alert('‚ùå Erro na transa√ß√£o: ' + error.message);
            }
            
            return false;
        }
    }

    async checkStatus() {
        try {
            console.log('üìã Verificando status do contrato...');
            const contractData = await window.realContractService.getContractDetails();
            
            alert(`üìä STATUS DO CONTRATO\n\n` +
                  `üí∞ Valor: ${contractData.amount} USDC\n` +
                  `üí≥ Depositado: ${contractData.deposited ? 'Sim' : 'N√£o'}\n` +
                  `‚è∞ Prazo: ${contractData.deadline.toLocaleDateString('pt-BR')}\n` +
                  `üíµ Saldo Restante: ${contractData.remainingAmount} USDC`);
        } catch (error) {
            console.error('‚ùå Erro ao verificar status:', error);
            alert('‚ùå Erro ao verificar status: ' + error.message);
        }
    }

    async approveMilestone(milestoneIndex = 0) {
        try {
            console.log(`‚úÖ Aprovando marco ${milestoneIndex}...`);
            await window.realContractService.releaseMilestone(milestoneIndex);
            alert(`‚úÖ Marco ${milestoneIndex + 1} aprovado com sucesso!`);
            // Recarregar p√°gina usando novo sistema
            await this.refreshCurrentPage();
        } catch (error) {
            console.error('‚ùå Erro ao aprovar marco:', error);
            
            // Verificar se √© erro de marco j√° executado
            if (error.message.includes('Marco ja executado')) {
                alert('‚ö†Ô∏è Este marco j√° foi executado anteriormente!');
            } else {
                alert('‚ùå Erro ao aprovar marco: ' + error.message);
            }
        }
    }

    async approveCancel() {
        try {
            console.log('‚ùå Aprovando cancelamento...');
            await window.realContractService.approveCancel();
            alert('‚úÖ Cancelamento aprovado!');
            // Recarregar p√°gina usando novo sistema
            await this.refreshCurrentPage();
        } catch (error) {
            console.error('‚ùå Erro ao aprovar cancelamento:', error);
            alert('‚ùå Erro ao aprovar cancelamento: ' + error.message);
        }
    }

    async refundContract() {
        try {
            console.log('üîÑ Fazendo refund...');
            await window.realContractService.refund();
            alert('‚úÖ Refund executado com sucesso!');
            // Recarregar p√°gina usando novo sistema
            await this.refreshCurrentPage();
        } catch (error) {
            console.error('‚ùå Erro ao fazer refund:', error);
            alert('‚ùå Erro ao fazer refund: ' + error.message);
        }
    }

    async showContractDetails() {
        try {
            console.log('üëÅÔ∏è Exibindo detalhes do contrato...');
            
            if (!window.realContractService || !window.realContractService.contract) {
                alert('‚ùå Nenhum contrato conectado');
                return;
            }
            
            const contractData = await window.realContractService.getContractDetails();
            
            // Criar modal com detalhes
            const modal = document.createElement('div');
            modal.className = 'modal-overlay';
            modal.innerHTML = `
                <div class="modal-content" style="max-width: 600px;">
                    <div class="modal-header">
                        <h2>üìã Detalhes do Contrato Escrow</h2>
                        <button class="close-btn" onclick="this.closest('.modal-overlay').remove()">&times;</button>
                    </div>
                    <div class="modal-body">
                        <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 15px; margin-bottom: 20px;">
                            <div><strong>Valor Total:</strong> ${contractData.amount} USDC</div>
                            <div><strong>Saldo Restante:</strong> ${contractData.remainingAmount} USDC</div>
                            <div><strong>Status:</strong> ${contractData.deposited ? '‚úÖ Depositado' : '‚è≥ Aguardando Dep√≥sito'}</div>
                            <div><strong>Pausado:</strong> ${contractData.paused ? '‚è∏Ô∏è Sim' : '‚ñ∂Ô∏è N√£o'}</div>
                </div>
                
                        <div style="margin-bottom: 20px;">
                            <strong>Participantes:</strong>
                            <div style="margin-left: 15px;">
                                <div><strong>Pagador:</strong> ${contractData.payer}</div>
                                <div><strong>Recebedor:</strong> ${contractData.payee}</div>
                            </div>
                </div>
                
                        <div style="margin-bottom: 20px;">
                            <strong>Prazo:</strong> ${contractData.deadline.toLocaleDateString('pt-BR')}
                </div>
                
                        <div style="margin-bottom: 20px;">
                            <strong>Marcos (${contractData.totalMilestones}):</strong>
                            <div style="margin-left: 15px;">
                                ${contractData.milestonePercentages.map((percent, index) => `
                                    <div>Marco ${index + 1}: ${percent}% - ${contractData.milestoneAmounts[index]} USDC ${contractData.milestoneExecuted[index] ? '‚úÖ' : '‚è≥'}</div>
                                `).join('')}
                            </div>
                        </div>
                        
                        <div>
                            <strong>Token:</strong> ${contractData.token}
                        </div>
                    </div>
                    <div class="modal-actions">
                        <button class="btn-secondary" onclick="this.closest('.modal-overlay').remove()">Fechar</button>
                </div>
            </div>
        `;

            document.body.appendChild(modal);
            
        } catch (error) {
            console.error('‚ùå Erro ao exibir detalhes:', error);
            alert('‚ùå Erro ao exibir detalhes: ' + error.message);
        }
    }

    async claimAfterDeadline() {
        try {
            console.log('‚è∞ Reclamando ap√≥s deadline...');
            await window.realContractService.claimAfterDeadline();
            alert('‚úÖ Reclama√ß√£o executada com sucesso!');
            // Recarregar p√°gina usando novo sistema
            await this.refreshCurrentPage();
        } catch (error) {
            console.error('‚ùå Erro ao reclamar:', error);
            alert('‚ùå Erro ao reclamar: ' + error.message);
        }
    }

    async viewContractDetails() {
        try {
            console.log('üîç Mostrando detalhes do contrato...');
            const contractData = await window.realContractService.getContractDetails();
            
            const userAddress = window.walletService?.account || '';
            const isPayer = contractData.payer.toLowerCase() === userAddress.toLowerCase();
            const isPayee = contractData.payee.toLowerCase() === userAddress.toLowerCase();
            
            alert(`üîç DETALHES COMPLETOS DO CONTRATO\n\n` +
                  `üìã Informa√ß√µes B√°sicas:\n` +
                  `‚Ä¢ Endere√ßo: ${window.realContractService.contractAddress}\n` +
                  `‚Ä¢ Pagador: ${contractData.payer}\n` +
                  `‚Ä¢ Recebedor: ${contractData.payee}\n` +
                  `‚Ä¢ Valor: ${contractData.amount} USDC\n` +
                  `‚Ä¢ Prazo: ${contractData.deadline.toLocaleString('pt-BR')}\n\n` +
                  `üí∞ Status Financeiro:\n` +
                  `‚Ä¢ Depositado: ${contractData.deposited ? 'Sim' : 'N√£o'}\n` +
                  `‚Ä¢ Saldo Restante: ${contractData.remainingAmount} USDC\n` +
                  `‚Ä¢ Token: USDC (Polygon)\n\n` +
                  `Seu Papel: ${isPayer ? 'PAGADOR' : isPayee ? 'RECEBEDOR' : 'OBSERVADOR'}`);
        } catch (error) {
            console.error('‚ùå Erro ao mostrar detalhes:', error);
            alert('‚ùå Erro ao mostrar detalhes: ' + error.message);
        }
    }

    /**
     * Renderiza a lista de contratos
     */
    renderContractsList() {
        const contractsList = document.getElementById('contractsList');
        if (!contractsList) return;

        // Usar dados do ContractService
        const contracts = window.contractService?.getContracts() || [];
        
        if (contracts.length === 0) {
            contractsList.innerHTML = `
                <div class="empty-state">
                    <div class="empty-icon">üìã</div>
                    <h3>Nenhum contrato encontrado</h3>
                    <p>Crie seu primeiro contrato de escrow para come√ßar</p>
                    <button class="btn-primary" onclick="window.navigationService.navigateTo('create')">
                        Criar Primeiro Contrato
                    </button>
                </div>
            `;
            return;
        }

        contractsList.innerHTML = contracts.map(contract => `
            <div class="contract-item" data-status="${contract.status}">
                <div class="contract-header">
                    <h4>${contract.title}</h4>
                    <span class="status-badge ${contract.status}">${this.getStatusText(contract.status)}</span>
                </div>
                <div class="contract-details">
                    <p><strong>Valor:</strong> R$ ${(contract.totalValue || 0).toLocaleString()}</p>
                    <p><strong>Marcos:</strong> ${(contract.milestones || []).length}</p>
                    <p><strong>Criado:</strong> ${contract.createdAt ? new Date(contract.createdAt).toLocaleDateString('pt-BR') : 'N/A'}</p>
                </div>
                <div class="contract-actions">
                    <button class="btn-secondary" onclick="window.navigationService.viewContract('${contract.id}')">
                        üëÅÔ∏è Ver Detalhes
                    </button>
                </div>
            </div>
        `).join('');
    }

    /**
     * Retorna texto do status
     */
    getStatusText(status) {
        const statusMap = {
            'pending': '‚è≥ Pendente',
            'active': '‚úÖ Ativo',
            'disputed': '‚ö†Ô∏è Disputado',
            'completed': 'üéâ Conclu√≠do'
        };
        return statusMap[status] || status;
    }

    /**
     * Bind dos eventos do formul√°rio de cria√ß√£o
     */
    bindCreateFormEvents() {
        const form = document.getElementById('createContractForm');
        if (form) {
            form.addEventListener('submit', (e) => {
                e.preventDefault();
                this.handleCreateContract();
            });
        }
    }

    /**
     * Bind dos eventos de filtro
     */
    bindFilterEvents() {
        const filterBtns = document.querySelectorAll('.filter-btn');
        filterBtns.forEach(btn => {
            btn.addEventListener('click', (e) => {
                // Remover classe active de todos
                filterBtns.forEach(b => b.classList.remove('active'));
                // Adicionar classe active ao clicado
                e.target.classList.add('active');
                
                // Aplicar filtro
                const filter = e.target.dataset.filter;
                this.applyFilter(filter);
            });
        });
    }

    /**
     * Aplica filtro na lista de contratos
     */
    applyFilter(filter) {
        const contractItems = document.querySelectorAll('.contract-item');
        
        contractItems.forEach(item => {
            if (filter === 'all' || item.dataset.status === filter) {
                item.style.display = 'block';
            } else {
                item.style.display = 'none';
            }
        });
    }

    /**
     * Visualiza detalhes de um contrato
     */
    viewContract(contractId) {
        console.log(`üëÅÔ∏è Visualizando contrato: ${contractId}`);
        
        // Buscar contrato na lista
        const contract = this.contracts.find(c => c.id === contractId);
        
        if (contract) {
            // Mostrar modal com detalhes
            this.showContractModal(contract);
        } else {
            console.warn(`Contrato n√£o encontrado: ${contractId}`);
        }
    }

    /**
     * Mostra modal com detalhes do contrato
     */
    showContractModal(contract) {
        const modal = document.getElementById('contractModal');
        const modalContent = document.getElementById('modalContent');
        
        if (modal && modalContent) {
            modalContent.innerHTML = `
                <div class="contract-modal-header">
                    <h3>${contract.title}</h3>
                    <span class="status-badge ${contract.status}">${this.getStatusText(contract.status)}</span>
                </div>
                <div class="contract-modal-body">
                    <p><strong>Tipo:</strong> ${contract.type}</p>
                    <p><strong>Valor:</strong> R$ ${(contract.totalValue || 0).toLocaleString()}</p>
                    <p><strong>Marcos:</strong> ${(contract.milestones || []).length}</p>
                    <p><strong>Cliente:</strong> ${contract.clientAddress || 'N/A'}</p>
                    <p><strong>Fornecedor:</strong> ${contract.supplierAddress || 'N/A'}</p>
                    <p><strong>Criado:</strong> ${contract.createdAt ? new Date(contract.createdAt).toLocaleDateString('pt-BR') : 'N/A'}</p>
                </div>
            `;
            
            modal.style.display = 'block';
        }
    }

    /**
     * Manipula cria√ß√£o de contrato
     */
    handleCreateContract() {
        const formData = new FormData(document.getElementById('createContractForm'));
        const contractData = {
            type: document.getElementById('contractType').value,
            clientAddress: document.getElementById('clientAddress').value,
            supplierAddress: document.getElementById('supplierAddress').value,
            totalValue: parseFloat(document.getElementById('totalValue').value),
            milestoneCount: parseInt(document.getElementById('milestoneCount').value)
        };

        // Validar dados
        if (!this.validateContractData(contractData)) {
            return;
        }

        // Criar contrato via ContractService
        if (window.contractService) {
            const newContract = window.contractService.createContract(contractData);
            if (newContract) {
                alert('‚úÖ Contrato criado com sucesso!');
                this.navigateTo('manage');
            } else {
                alert('‚ùå Erro ao criar contrato. Tente novamente.');
            }
        }
    }

    /**
     * Valida dados do contrato
     */
    validateContractData(data) {
        if (!data.type) {
            alert('‚ùå Selecione o tipo de contrato');
            return false;
        }
        if (!data.clientAddress || !data.supplierAddress) {
            alert('‚ùå Preencha os endere√ßos das carteiras');
            return false;
        }
        if (!data.totalValue || data.totalValue < 1000) {
            alert('‚ùå Valor deve ser maior que R$ 1.000');
            return false;
        }
        if (!data.milestoneCount || data.milestoneCount < 2) {
            alert('‚ùå Selecione pelo menos 2 marcos');
            return false;
        }
        return true;
    }

    /**
     * Obt√©m p√°gina atual
     */
    getCurrentPage() {
        return this.currentPage;
    }

    /**
     * Verifica se est√° em uma p√°gina espec√≠fica
     */
    isOnPage(pageId) {
        return this.currentPage === pageId;
    }

    /**
     * Restaura a p√°gina inicial (para uso do bot√£o voltar)
     */
    restoreHomePage() {
        console.log('üîÑ Restaurando p√°gina inicial...');
        
        // Limpar hash da URL sem recarregar
        history.replaceState(null, '', ' ');
        
        // Atualizar estado e renderizar home
        this.currentPage = 'home';
        this.renderPage('home');
    }

    /**
     * Mostra modal de ajuda com explica√ß√µes detalhadas
     */
    showHelpModal() {
        console.log('üìñ Mostrando modal de ajuda...');
        
        const modal = document.createElement('div');
        modal.className = 'help-modal-overlay';
        modal.innerHTML = `
            <div class="help-modal-content">
                <div class="help-modal-header">
                    <h2>üìö Como Funciona o Deal-Fi</h2>
                    <button class="close-help-btn" onclick="window.navigationService.closeHelpModal(this.closest('.help-modal-overlay'))">√ó</button>
                </div>
                
                <div class="help-modal-body">
                    <div class="help-section">
                        <h3>üöÄ Fluxo Completo do Deal-Fi</h3>
                        <p>Este √© o fluxo exato que o smart contract segue, desde o deploy at√© o encerramento:</p>
                    </div>
                    
                    <div class="help-section">
                        <h3>1Ô∏è‚É£ FASE INICIAL: Deploy e Valida√ß√µes</h3>
                        <p><strong>üöÄ Deploy do Smart Contract</strong><br>
                        Por Payer ou Payee com par√¢metros: payer, payee, duration, token USDC, milestones array</p>
                        
                        <p><strong>‚úì Valida√ß√µes no Construtor:</strong></p>
                        <ul>
                            <li>Endere√ßos v√°lidos</li>
                            <li>Percentuais somam 100%</li>
                            <li>M√°ximo 10 marcos</li>
                        </ul>
                        <p><strong>‚ùå Falha ‚Üí Contrato n√£o ativado</strong></p>
                        
                        <p><strong>‚öôÔ∏è Contrato Ativo</strong><br>
                        deadline = block.timestamp + duration<br>
                        deposited = false, confirmedPayer = false, confirmedPayee = false</p>
                    </div>
                    
                    <div class="help-section">
                        <h3>2Ô∏è‚É£ FASE DE ATIVA√á√ÉO: Taxa e Confirma√ß√µes</h3>
                        <p><strong>üí∞ Taxa de Plataforma: 1 USDC</strong><br>
                        Transferido por qualquer parte para: 0xC101e76Da55BC93438a955546E93D56312a3CF16<br>
                        Evento: PlatformFeePaid</p>
                        
                        <p><strong>‚è≥ Aguardando Confirma√ß√µes M√∫tuas</strong><br>
                        Ambas as partes devem confirmar identidade:</p>
                        <ul>
                            <li>Payer: confirmPayer() ‚Üí confirmedPayer = true</li>
                            <li>Payee: confirmPayee() ‚Üí confirmedPayee = true</li>
                        </ul>
                        <p><strong>‚ùå Falha ‚Üí Allowance insuficiente, valor ‚â§0, j√° depositado</strong></p>
                        
                        <p><strong>üîì Dep√≥sito Integral Permitido</strong><br>
                        Payer: token.approve(address(this), amount)<br>
                        Payer: deposit(amount)<br>
                        <strong>‚úÖ Sucesso ‚Üí Dep√≥sito integral efetuado, garantia trancada</strong></p>
                    </div>
                    
                    <div class="help-section">
                        <h3>3Ô∏è‚É£ FASE DE EXECU√á√ÉO: Escolhas do Payer</h3>
                        <p><strong>üéØ Escolha do Payer (Dispon√≠vel SEMPRE)</strong><br>
                        Antes e ap√≥s deadline, o Payer pode escolher:</p>
                        
                        <h4>üì§ Op√ß√£o 1: Liberar Marco</h4>
                        <p><strong>releaseMilestone(index)</strong></p>
                        <ul>
                            <li>require msg.sender == payer</li>
                            <li>require deposited == true</li>
                            <li>SEM verifica√ß√£o de deadline</li>
                        </ul>
                        <p><strong>‚ùå Falha ‚Üí N√£o sequencial, marco j√° executado, √≠ndice inv√°lido</strong><br>
                        <strong>‚úÖ Sucesso ‚Üí Transfer ao Payee, Evento: MilestoneReleased</strong></p>
                        
                        <h4>üö´ Op√ß√£o 2: Cancel Bilateral</h4>
                        <p><strong>approveCancel</strong></p>
                        <ul>
                            <li>require msg.sender == payer OR payee</li>
                            <li>require deposited == true</li>
                            <li>SEM verifica√ß√£o de deadline</li>
                            <li>Registra timestamp da aprova√ß√£o</li>
                        </ul>
                        <p><strong>‚ö†Ô∏è Janela 1h expirada ‚Üí Contrato continua ativo</strong><br>
                        <strong>‚úÖ Sucesso ‚Üí Devolve 100% saldo ao Payer, Evento: Cancelled</strong></p>
                        
                        <h4>‚Ü©Ô∏è Op√ß√£o 3: Refund Unilateral</h4>
                        <p><strong>refund</strong></p>
                        <ul>
                            <li>require msg.sender == payer</li>
                            <li>require deposited == true</li>
                        </ul>
                        <p><strong>‚ùå Falha ‚Üí Primeiro marco j√° executado</strong><br>
                        <strong>‚úÖ Sucesso ‚Üí Devolve 100% ao Payer, Evento: Refunded</strong></p>
                        
                        <h4>‚è∞ Op√ß√£o 4: Saque P√≥s-Prazo</h4>
                        <p><strong>claimAfterDeadline</strong></p>
                        <ul>
                            <li>require msg.sender == payer</li>
                            <li>require deposited == true</li>
                            <li>require block.timestamp > deadline</li>
                        </ul>
                        <p><strong>‚ùå Falha ‚Üí N√£o depositado ou prazo n√£o expirado</strong><br>
                        <strong>‚úÖ Sucesso ‚Üí Devolve saldo ao Payer, Evento: ClaimedAfterDeadline</strong></p>
                    </div>
                    
                    <div class="help-section">
                        <h3>4Ô∏è‚É£ FASE DE SETTLEMENT (Opcional)</h3>
                        <p><strong>Se Cancel Bilateral for escolhido:</strong></p>
                        <ul>
                            <li>Payer: proposeSettlement(amount) ‚Üí Registra timestamp</li>
                            <li>Payee: approveSettlement (dentro de 1h)</li>
                        </ul>
                        <p><strong>‚úÖ Sucesso ‚Üí Acordo: Parte ao Payee, Resto ao Payer, Evento: Settled</strong><br>
                        <strong>‚ö†Ô∏è Timeout ‚Üí Cancelamento normal</strong></p>
                    </div>
                    
                    <div class="help-section">
                        <h3>5Ô∏è‚É£ FASE FINAL: Encerramento</h3>
                        <p><strong>üéâ Fim: Execu√ß√£o Plena</strong><br>
                        Contrato encerrado quando:</p>
                        <ul>
                            <li>Todos os marcos liberados</li>
                            <li>Cancelamento bilateral executado</li>
                            <li>Settlement aprovado</li>
                            <li>Refund unilateral executado</li>
                            <li>Saque p√≥s-prazo executado</li>
                        </ul>
                    </div>
                    
                    <div class="help-section">
                        <h3>‚ö†Ô∏è Fluxos de Invalida√ß√£o</h3>
                        <p><strong>‚ùå Fim: Nulidade Inicial</strong><br>
                        Contrato n√£o ativado quando:</p>
                        <ul>
                            <li>V√≠cio no construtor (endere√ßos inv√°lidos, % ‚â†100, m√°x 10 marcos)</li>
                            <li>Allowance insuficiente, valor ‚â§0, j√° depositado, taxa n√£o paga</li>
                            <li>N√£o sequencial, marco j√° executado, √≠ndice inv√°lido</li>
                            <li>Primeiro marco j√° executado para refund</li>
                            <li>N√£o depositado ou prazo n√£o expirado para saque</li>
                        </ul>
                    </div>
                    
                    <div class="help-section">
                        <h3>üîß Informa√ß√µes T√©cnicas</h3>
                        <ul>
                            <li><strong>Smart Contract:</strong> EscrowUSDC_Dynamic_Production.sol</li>
                            <li><strong>Rede:</strong> Polygon Mainnet (Chain ID: 137)</li>
                            <li><strong>Token USDC:</strong> 0x3c499c542cEF5E3811e1192ce70d8cC03d5c3359</li>
                            <li><strong>Taxa de Plataforma:</strong> 1 USDC para 0xC101e76Da55BC93438a955546E93D56312a3CF16</li>
                            <li><strong>Janela de Cancelamento:</strong> 1 hora ap√≥s primeira aprova√ß√£o</li>
                            <li><strong>Janela de Settlement:</strong> 1 hora ap√≥s proposta</li>
                        </ul>
                    </div>
                </div>
                
                <div class="help-modal-footer">
                    <button class="btn-primary" onclick="window.navigationService.closeHelpModal(this.closest('.help-modal-overlay'))">
                        Entendi! Vamos Come√ßar
                    </button>
                </div>
            </div>
        `;
        
        document.body.appendChild(modal);
    }

    /**
     * Fecha o modal de ajuda com transi√ß√£o suave
     */
    closeHelpModal(modal) {
        if (modal) {
            modal.classList.add('closing');
            setTimeout(() => {
                modal.remove();
            }, 200); // Tempo da anima√ß√£o de fechamento
        }
    }
    
    /**
     * Configura eventos do modal
     */
    setupModalEvents() {
        // Fechar modal ao clicar no X
        const closeBtn = document.getElementById('modalClose');
        if (closeBtn) {
            closeBtn.addEventListener('click', () => {
                const modal = document.getElementById('contractModal');
                if (modal) {
                    modal.style.display = 'none';
                }
            });
        }

        // Fechar modal ao clicar fora dele
        const modal = document.getElementById('contractModal');
        if (modal) {
            modal.addEventListener('click', (e) => {
                if (e.target === modal) {
                    modal.style.display = 'none';
                }
            });
        }
    }

    async loadRealContracts() {
        try {
            if (window.realContractService && window.realContractService.contract) {
                console.log('üîç Carregando contratos reais...');
                const contracts = await window.realContractService.fetchRealContracts();
                console.log('‚úÖ Contratos reais carregados:', contracts);
                
                // Atualizar estat√≠sticas
                if (window.summaryCardsComponent) {
                    const stats = await window.realContractService.getStats();
                    console.log('üìä Estat√≠sticas atualizadas:', stats);
                }
                
                // Re-renderizar a p√°gina de gerenciamento se estivermos nela
                if (this.currentPage === 'manage') {
                    console.log('üîÑ Re-renderizando p√°gina de gerenciamento...');
                    await this.loadStateBasedUI();
                }
            }
        } catch (error) {
            console.error('‚ùå Erro ao carregar contratos reais:', error);
        }
    }

    async testRealConnection() {
        try {
            console.log('üß™ Testando conex√£o com contrato real...');
            
            // Verificar se MetaMask est√° dispon√≠vel
            if (!window.ethereum) {
                console.log('‚ùå window.ethereum n√£o encontrado');
                console.log('üîç Verificando alternativas...');
                
                // Tentar detectar MetaMask de outras formas
                if (window.web3) {
                    console.log('‚úÖ window.web3 encontrado');
                } else {
                    console.log('‚ùå window.web3 tamb√©m n√£o encontrado');
                }
                
                // Verificar se MetaMask est√° instalado mas n√£o detectado
                if (typeof window.ethereum === 'undefined') {
                    alert('‚ùå MetaMask n√£o detectado!\n\n' +
                          'Tente:\n' +
                          '1. Recarregar a p√°gina (F5)\n' +
                          '2. Verificar se MetaMask est√° ativo\n' +
                          '3. Permitir acesso ao site');
                    return;
                }
            }

            // Conectar com MetaMask
            console.log('üîó Conectando com MetaMask...');
            const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });
            const account = accounts[0];
            console.log('‚úÖ Carteira conectada:', account);

            // Criar provider e signer
            const provider = new ethers.BrowserProvider(window.ethereum);
            const signer = await provider.getSigner();

            // Conectar com contrato real
            console.log('üîó Conectando com contrato:', window.ESCROW_CONTRACT_ADDRESS);
            const contract = new ethers.Contract(
                window.ESCROW_CONTRACT_ADDRESS,
                window.escrowABI,
                signer
            );

            // Testar leitura do contrato
            console.log('üìñ Testando leitura do contrato...');
            const payer = await contract.payer();
            const payee = await contract.payee();
            const amount = await contract.amount();
            const deposited = await contract.deposited();
            const deadline = await contract.deadline();

            console.log('‚úÖ Dados do contrato lidos com sucesso!');
            console.log('üìä Dados:', {
                payer,
                payee,
                amount: ethers.formatUnits(amount, 6) + ' USDC',
                deposited,
                deadline: new Date(parseInt(deadline) * 1000).toLocaleString()
            });

            // Mostrar resultado
            alert(`‚úÖ Conex√£o com contrato real bem-sucedida!\n\n` +
                  `Endere√ßo: ${window.ESCROW_CONTRACT_ADDRESS}\n` +
                  `Pagador: ${payer}\n` +
                  `Recebedor: ${payee}\n` +
                  `Valor: ${ethers.formatUnits(amount, 6)} USDC\n` +
                  `Depositado: ${deposited ? 'Sim' : 'N√£o'}\n` +
                  `Prazo: ${new Date(parseInt(deadline) * 1000).toLocaleString()}`);

            // Atualizar interface
            await this.loadRealContracts();

        } catch (error) {
            console.error('‚ùå Erro ao testar conex√£o:', error);
            alert('‚ùå Erro ao conectar com contrato real:\n\n' + error.message);
        }
    }

    debugMetaMask() {
        console.log('üîç === DEBUG METAMASK ===');
        console.log('window.ethereum:', window.ethereum);
        console.log('typeof window.ethereum:', typeof window.ethereum);
        console.log('window.web3:', window.web3);
        console.log('typeof window.web3:', typeof window.web3);
        console.log('window.MetaMask:', window.MetaMask);
        console.log('navigator.userAgent:', navigator.userAgent);
        
        // Verificar se MetaMask est√° dispon√≠vel
        if (window.ethereum) {
            console.log('‚úÖ window.ethereum encontrado!');
            console.log('isMetaMask:', window.ethereum.isMetaMask);
            console.log('chainId:', window.ethereum.chainId);
            console.log('networkVersion:', window.ethereum.networkVersion);
        } else {
            console.log('‚ùå window.ethereum n√£o encontrado');
        }
        
        // Mostrar resultado
        const result = `
üîç DEBUG METAMASK:
‚Ä¢ window.ethereum: ${window.ethereum ? '‚úÖ Encontrado' : '‚ùå N√£o encontrado'}
‚Ä¢ typeof: ${typeof window.ethereum}
‚Ä¢ window.web3: ${window.web3 ? '‚úÖ Encontrado' : '‚ùå N√£o encontrado'}
‚Ä¢ isMetaMask: ${window.ethereum?.isMetaMask ? '‚úÖ Sim' : '‚ùå N√£o'}
‚Ä¢ chainId: ${window.ethereum?.chainId || 'N/A'}
‚Ä¢ networkVersion: ${window.ethereum?.networkVersion || 'N/A'}
        `;
        
        alert(result);
        console.log('üîç === FIM DEBUG ===');
    }

    async forceMetaMaskConnection() {
        console.log('üöÄ For√ßando conex√£o com MetaMask...');
        
        let ethereum = null;
        
        // M√©todo 1: Usar detectEthereumProvider (recomendado)
        if (typeof detectEthereumProvider !== 'undefined') {
            console.log('üîç Usando detectEthereumProvider...');
            ethereum = await detectEthereumProvider();
            if (ethereum) {
                console.log('‚úÖ MetaMask encontrado via detectEthereumProvider');
            }
        }
        
        // M√©todo 2: window.ethereum (fallback)
        if (!ethereum && window.ethereum) {
            ethereum = window.ethereum;
            console.log('‚úÖ MetaMask encontrado via window.ethereum');
        }
        
        // M√©todo 3: window.web3.currentProvider (fallback)
        if (!ethereum && window.web3 && window.web3.currentProvider) {
            ethereum = window.web3.currentProvider;
            console.log('‚úÖ MetaMask encontrado via window.web3.currentProvider');
        }
        
        if (!ethereum) {
            console.log('‚ùå MetaMask n√£o encontrado');
            alert('‚ùå MetaMask n√£o encontrado!\n\n' +
                  'IMPORTANTE: O MetaMask s√≥ funciona quando o site roda em um servidor!\n\n' +
                  'Solu√ß√µes:\n' +
                  '1. Use um servidor local (npx serve, http-server)\n' +
                  '2. N√£o abra arquivos HTML diretamente\n' +
                  '3. Teste em localhost:3000 ou similar\n\n' +
                  'Para testar agora:\n' +
                  '‚Ä¢ Abra o terminal\n' +
                  '‚Ä¢ Execute: npx serve escrow-dapp/frontend\n' +
                  '‚Ä¢ Acesse o link fornecido');
            return false;
        }
        
        try {
            console.log('üîó Conectando com MetaMask...');
            const accounts = await ethereum.request({ method: 'eth_requestAccounts' });
            const account = accounts[0];
            console.log('‚úÖ Carteira conectada:', account);
            
            // Criar provider e signer (ethers v5) - FOR√áAR POLYGON
            const provider = new ethers.providers.Web3Provider(ethereum, "any");
            const signer = provider.getSigner();
            
            // For√ßar conex√£o com contas
            await provider.send("eth_requestAccounts", []);
            
            // Debug da rede
            console.log('üîç Debug da rede...');
            const network = await provider.getNetwork();
            console.log('üì° Rede:', network);
            
            // Verificar se est√° na Polygon Mainnet
            if (network.chainId !== 137) {
                throw new Error(`Rede incorreta! Atual: ${network.chainId}, Necess√°rio: 137 (Polygon Mainnet)`);
            }
            
            console.log('‚úÖ Conectado √† Polygon Mainnet!');
            
            const blockNumber = await provider.getBlockNumber();
            console.log('üì¶ Block atual:', blockNumber);
            
            // Conectar com contrato real
            const contractAddress = "0xE960D1E2A2D5F5B629C022EEd464e53BB8B09AA9";
            console.log('üîó Conectando com contrato:', contractAddress);
            
            const balance = await provider.getBalance(contractAddress);
            console.log('üí∞ Saldo do contrato:', ethers.utils.formatEther(balance), 'POL');
            
            // Buscar ABI do PolygonScan
            console.log('üîç Buscando ABI do PolygonScan...');
            try {
                const abiResponse = await fetch(`https://api.polygonscan.com/api?module=contract&action=getabi&address=${contractAddress}`);
                const abiData = await abiResponse.json();
                
                if (abiData.status === '1') {
                    const realABI = JSON.parse(abiData.result);
                    console.log('‚úÖ ABI encontrado no PolygonScan:', realABI);
                    
                    // Usar o ABI real
                    const contract = new ethers.Contract(contractAddress, realABI, signer);
                    
                    // Testar fun√ß√µes do ABI real
                    console.log('üìñ Testando fun√ß√µes do ABI real...');
                    
                    // Listar todas as fun√ß√µes dispon√≠veis
                    const functions = realABI.filter(item => item.type === 'function');
                    console.log('üìã Fun√ß√µes dispon√≠veis:', functions.map(f => f.name));
                    
                    alert(`‚úÖ ABI encontrado no PolygonScan!\n\n` +
                          `Fun√ß√µes dispon√≠veis: ${functions.map(f => f.name).join(', ')}\n\n` +
                          `Veja o console para detalhes`);
                    
                    return true;
                } else {
                    console.log('‚ùå ABI n√£o encontrado no PolygonScan:', abiData.message);
                }
            } catch (e) {
                console.log('‚ùå Erro ao buscar ABI:', e.message);
            }
            
            // ABI correto baseado no c√≥digo do contrato
            const correctABI = [
                {
                    "inputs": [],
                    "name": "payer",
                    "outputs": [{"name": "", "type": "address"}],
                    "stateMutability": "view",
                    "type": "function"
                },
                {
                    "inputs": [],
                    "name": "payee",
                    "outputs": [{"name": "", "type": "address"}],
                    "stateMutability": "view",
                    "type": "function"
                },
                {
                    "inputs": [],
                    "name": "token",
                    "outputs": [{"name": "", "type": "address"}],
                    "stateMutability": "view",
                    "type": "function"
                },
                {
                    "inputs": [],
                    "name": "amount",
                    "outputs": [{"name": "", "type": "uint256"}],
                    "stateMutability": "view",
                    "type": "function"
                },
                {
                    "inputs": [],
                    "name": "deposited",
                    "outputs": [{"name": "", "type": "bool"}],
                    "stateMutability": "view",
                    "type": "function"
                },
                {
                    "inputs": [],
                    "name": "deadline",
                    "outputs": [{"name": "", "type": "uint256"}],
                    "stateMutability": "view",
                    "type": "function"
                },
                {
                    "inputs": [],
                    "name": "m1PayerApproved",
                    "outputs": [{"name": "", "type": "bool"}],
                    "stateMutability": "view",
                    "type": "function"
                },
                {
                    "inputs": [],
                    "name": "m1PayeeApproved",
                    "outputs": [{"name": "", "type": "bool"}],
                    "stateMutability": "view",
                    "type": "function"
                },
                {
                    "inputs": [],
                    "name": "m2PayerApproved",
                    "outputs": [{"name": "", "type": "bool"}],
                    "stateMutability": "view",
                    "type": "function"
                },
                {
                    "inputs": [],
                    "name": "m2PayeeApproved",
                    "outputs": [{"name": "", "type": "bool"}],
                    "stateMutability": "view",
                    "type": "function"
                },
                {
                    "inputs": [],
                    "name": "m1Executed",
                    "outputs": [{"name": "", "type": "bool"}],
                    "stateMutability": "view",
                    "type": "function"
                },
                {
                    "inputs": [],
                    "name": "m2Executed",
                    "outputs": [{"name": "", "type": "bool"}],
                    "stateMutability": "view",
                    "type": "function"
                },
                {
                    "inputs": [],
                    "name": "cancelPayerApproved",
                    "outputs": [{"name": "", "type": "bool"}],
                    "stateMutability": "view",
                    "type": "function"
                },
                {
                    "inputs": [],
                    "name": "cancelPayeeApproved",
                    "outputs": [{"name": "", "type": "bool"}],
                    "stateMutability": "view",
                    "type": "function"
                },
                {
                    "inputs": [],
                    "name": "remaining",
                    "outputs": [{"name": "", "type": "uint256"}],
                    "stateMutability": "view",
                    "type": "function"
                },
                {
                    "inputs": [],
                    "name": "halves",
                    "outputs": [
                        {"name": "half1", "type": "uint256"},
                        {"name": "half2", "type": "uint256"}
                    ],
                    "stateMutability": "view",
                    "type": "function"
                }
            ];
            
            console.log('üìã ABI correto carregado:', correctABI);
            const contract = new ethers.Contract(
                contractAddress,
                correctABI,
                signer
            );
            
            // Testar se o contrato existe
            console.log('üìñ Testando se o contrato existe...');
            
            // Tentar ler o c√≥digo do contrato
            const code = await provider.getCode(contractAddress);
            console.log('üìã C√≥digo do contrato:', code);
            
            if (code === '0x') {
                throw new Error('Contrato n√£o encontrado neste endere√ßo');
            }
            
            // Testar fun√ß√µes do contrato EscrowUSDC
            let payer, payee, amount, deposited, deadline, token, remaining;
            
            try {
                payer = await contract.payer();
                console.log('‚úÖ payer():', payer);
            } catch (e) {
                console.log('‚ùå payer() n√£o existe:', e.message);
            }
            
            try {
                payee = await contract.payee();
                console.log('‚úÖ payee():', payee);
            } catch (e) {
                console.log('‚ùå payee() n√£o existe:', e.message);
            }
            
            try {
                token = await contract.token();
                console.log('‚úÖ token():', token);
            } catch (e) {
                console.log('‚ùå token() n√£o existe:', e.message);
            }
            
            try {
                amount = await contract.amount();
                console.log('‚úÖ amount():', amount);
            } catch (e) {
                console.log('‚ùå amount() n√£o existe:', e.message);
            }
            
            try {
                deposited = await contract.deposited();
                console.log('‚úÖ deposited():', deposited);
            } catch (e) {
                console.log('‚ùå deposited() n√£o existe:', e.message);
            }
            
            try {
                deadline = await contract.deadline();
                console.log('‚úÖ deadline():', deadline);
            } catch (e) {
                console.log('‚ùå deadline() n√£o existe:', e.message);
            }
            
            try {
                remaining = await contract.remaining();
                console.log('‚úÖ remaining():', remaining);
            } catch (e) {
                console.log('‚ùå remaining() n√£o existe:', e.message);
            }
            
            // Mostrar resultado com dados reais
            const deadlineDate = new Date(parseInt(deadline.toString()) * 1000);
            const amountFormatted = ethers.utils.formatUnits(amount, 6); // USDC tem 6 decimais
            
            alert(`‚úÖ Contrato encontrado e funcionando!\n\n` +
                  `Endere√ßo: ${contractAddress}\n` +
                  `Pagador: ${payer}\n` +
                  `Recebedor: ${payee}\n` +
                  `Token: ${token}\n` +
                  `Valor: ${amountFormatted} USDC\n` +
                  `Depositado: ${deposited ? 'Sim' : 'N√£o'}\n` +
                  `Prazo: ${deadlineDate.toLocaleString()}\n\n` +
                  `üéâ Sistema conectado com sucesso!`);
            
            return true;
            
        } catch (error) {
            console.error('‚ùå Erro ao for√ßar conex√£o:', error);
            alert('‚ùå Erro ao conectar:\n\n' + error.message);
            return false;
        }
    }
}

// Inst√¢ncia global do servi√ßo
window.navigationService = new NavigationService();

// Log de debug
console.log('üîß NavigationService inicializado:', window.navigationService);
